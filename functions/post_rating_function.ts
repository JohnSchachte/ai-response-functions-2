// /slack-samples/deno-hello-world/functions/greeting_function.ts
import { DefineFunction, Schema, SlackFunction } from "deno-slack-sdk/mod.ts";

export const postUserRating = DefineFunction({
  callback_id: "post_rating",
  title: "Posts User AI Feedback",
  description: "Posts the user rating to the AI backend endpoints for storage in db",
  source_file: "functions/post_rating_function.ts",
  input_parameters: {
    properties: {
        aivUserId: {
          type: Schema.types.string,
          description: "User Id that AI team wants me to keep putting in the header.",
        },
        feedback: {
            type: Schema.types.string,
            description: "binary response to the AI response (thumbs up or thumbs down) or 'No AI Response'.",
        },
        comment: {
            type: Schema.types.string,
            description: "optional additional context of why the agent felt the way they did about the AI response",
        },
        isPostSuccess: {
            type: Schema.types.boolean,
            description: "Flag to indicate if the post was successful for the message thread in the claimer's thread. If false, then skip.",
        },
        answerId: {
          type: Schema.types.string,
          description: "Id of the answer produced by the AI response job.",
        },
        aiAnswer: {
          type: Schema.types.string,
          description: "The content of the answer object from polling the jobId."
        },
        additionalContext: {
          type: Schema.types.string,
          description: "Original context of the priority request submitted by the submission agent."
        },
        submissionThread: {
          type: Schema.slack.types.message_context,
          description: "Message Thread ID in the submission channel",
        },
        endpointIndicator: {
          type: Schema.types.string,
          description: "A string indicator to use with environment object to get the correct endpoint"
        }

    },
    required: ["aivUserId","feedback","isPostSuccess","submissionThread","endpointIndicator"],
  }
});

export default SlackFunction(
  postUserRating,
  async ({ inputs, env, client}) => {

    const {AUTH_TOKEN} = env;

    const ENDPOINT = env[inputs.endpointIndicator];
    
    // Log the env and inputs to the console ONLY locally
    console.log(`inputs: ${JSON.stringify(inputs)}`);

    // check if upstream steps were successful
    if (inputs.answerId == null) {
      console.log("Skipping post rating function because no answerId was provided.");
      return { outputs: {} };
    }
    

    let emoji;
    if(inputs.feedback == "Good") emoji = "thumbup";
    // else if(inputs.feedback == "Bad") emoji = "thumbdown";
    else emoji = inputs.feedback;

    try{
      let msgResponse;
      const fallbackText = "AI Response for Priority Request";
      const cautionText = "Please proceed with caution: the following text was generated by an AI model trained on Knowledge Base articles";

      if(inputs.feedback == "Good" && inputs.isPostSuccess){
        msgResponse = await client.apiCall("chat.postMessage", {
          channel: inputs.submissionThread.channel_id,
          thread_ts: inputs.submissionThread.message_ts,
          text: fallbackText, // This text is displayed in notifications and clients that do not support blocks.
          blocks: [
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*Original Context from Submitter:*\n"+inputs.additionalContext // the additional context fed into the AI from user response form
              }
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": `*${cautionText}*: \n${inputs.aiAnswer}` 
              }
            }
          ],
          mrkdwn: true // This ensures Markdown is processed in the message text.
        });

        
        console.log("Message posted into thread not in dev mode. Response: ",msgResponse);
      }

      
    }catch(f){
      console.log("Error in posting message to thread");
      console.error(f);
    }

    
    const comment = inputs.comment, answerId = inputs.answerId;

    const postData = JSON.stringify({
      emoji: emoji,
      comment: comment
    })
  
    console.log(`body: ${postData}`);

    try{
      /* example of a fetch call to the endpoint
      curl --location '{{base}}/answers/:answerId/owner-vote' \ --header 'Content-Type: application/json' \ --header 'Authorization: {{token}}' \ --data '{ "emoji": "thumbup||thumbdown", "comment": "My comment text or null" }'
      */
      // Use async/await syntax for the fetch call
      const response = await fetch(`${ENDPOINT}answers/${answerId}/owner-vote`, {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json',
              'Authorization': AUTH_TOKEN,
              'X-User-Id': inputs.aivUserId
          },
          body: postData
      });

      if (!response.ok) {
          console.error('HTTP error', response.status, await response.text());
          return { outputs: {} };
      }
      console.log("Successfully posted user rating to AI response job with id: ", answerId);
      return { outputs: {} };

    }catch(f){
      console.log("Error in fetch call");
      console.error(f);
      return { outputs: {} };
  }
});